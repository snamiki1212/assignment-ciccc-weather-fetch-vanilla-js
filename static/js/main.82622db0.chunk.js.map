{"version":3,"sources":["constants.ts","components/shared/Logo.tsx","components/shared/Navigation.tsx","components/shared/Footer.tsx","components/shared/Icon.tsx","components/shared/WeatherItemCard.tsx","api/weather.ts","hooks/useCurrentWeather.ts","hooks/useInput.tsx","components/pages/WeatherPage.tsx","hooks/useToggle.tsx","components/forecast/ForecastSection.tsx","components/pages/ForecastPage.tsx","components/pages/HomePage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PATH","SNS","Logo","bgClip","bgGradient","fontSize","fontWeight","links","text","to","Navigation","useColorMode","colorMode","toggleColorMode","navButtonBg","useColorModeValue","navButtonHoverBg","p","bg","borderBottomColor","borderWidth","justifyContent","as","ReactRouterLink","_hover","textDecoration","map","link","href","color","spacing","isChecked","onChange","colorScheme","Button","variant","cursor","size","src","Link","isExternal","textDecor","Footer","py","flexGrow","pt","textAlign","getIconUrl","icon","Icon","rest","WeatherItemCard","dt","item","_date","Date","day","toDateString","time","String","getHours","padStart","getMinutes","boxShadow","align","rounded","borderColor","weather","width","w","PREFIX_URL","SUFFIX_URL","getCurrentWeatherUrl","cityName","getForecastWeatherUrl","days","searchCurrentWeather","a","url","fetch","res","status","alert","console","error","body","Error","json","weatherObj","fetchForecastWeather","DEFAULT_CITY_NAME","useInput","defaultValue","React","useState","inputed","setInputed","handleChange","useCallback","event","target","value","WeatherPage","lastSearchedCityName","setLastSearchedCityName","setWeather","searchWeather","then","log","useCurrentWeather","handleClick","init","on","setOn","toggle","prev","useToggle","handleToggle","useEffect","handleInterval","setInterval","clearInterval","onClick","ForecastSection","forecast","city","name","maxWidth","overflowX","px","list","idx","inRange","num","ForecastPage","handleChangeCityName","setDays","valueStr","_days","parseInt","isNaN","useInputDays","handleChangeDays","undefined","setForecst","loading","setLoading","data","catch","err","finally","m","borderRadius","placeholder","disabled","pages","title","description","path","HomePage","boxBorderColor","lineHeight","page","mt","Body","App","minHeight","flexDir","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82622db0.chunk.js","sourcesContent":["export const PATH = {\n  home: \"/\",\n  forecast: \"/forecast\",\n  current: \"/current\",\n} as const;\n\nexport const SNS = {\n  THIS_GITHUB:\n    \"https://github.com/snamiki1212/open-weather-react-typescript-chakra\",\n  MY_GITHUB: \"https://github.com/snamiki1212\",\n  MY_LINKEDIN: \"https://www.linkedin.com/in/snamiki1212/\",\n  MY_AVATOR:\n    \"https://avatars.githubusercontent.com/u/26793088?s=460&u=7cd8858ef043c328a3b729553c5ad81498bd65c4&v=4\",\n} as const;\n","import React from \"react\";\nimport { Text } from \"@chakra-ui/react\";\n\nexport function Logo() {\n  return (\n    <Text\n      bgClip=\"text\"\n      bgGradient=\"linear(to-l, #7928CA, #FF0080)\"\n      fontSize=\"3xl\"\n      fontWeight=\"extrabold\"\n    >\n      OpenWeatherApp\n    </Text>\n  );\n}\n","import React from \"react\";\nimport { Logo } from \"./Logo\";\nimport { Link as ReactRouterLink } from \"react-router-dom\";\nimport { PATH, SNS } from \"../../constants\";\nimport {\n  Box,\n  Flex,\n  Text,\n  Button,\n  Link,\n  Avatar,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem,\n  HStack,\n  Switch,\n  useColorMode,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\n\nconst links = [\n  { text: \"Weather\", to: PATH.current },\n  { text: \"Forecast\", to: PATH.forecast },\n] as const;\n\nexport function Navigation() {\n  const { colorMode, toggleColorMode } = useColorMode();\n  const navButtonBg = useColorModeValue(\"gray.50\", \"gray.900\");\n  const navButtonHoverBg = useColorModeValue(\"pink.50\", \"pink.900\");\n  return (\n    <Box\n      p={2}\n      bg={useColorModeValue(\"gray.50\", \"gray.900\")}\n      borderBottomColor={useColorModeValue(\"gray.100\", \"gray.700\")}\n      borderWidth={1}\n    >\n      <Flex justifyContent=\"space-between\">\n        <Box as={\"nav\"}>\n          <Link\n            as={ReactRouterLink}\n            to={PATH.home}\n            _hover={{ textDecoration: \"none\" }}\n          >\n            <Logo />\n          </Link>\n        </Box>\n        <HStack>\n          {links.map((link) => (\n            <Link\n              as={ReactRouterLink}\n              to={link.to}\n              _hover={{ textDecoration: \"none\" }}\n            >\n              <Button\n                bg={navButtonBg}\n                _hover={{\n                  bg: navButtonHoverBg,\n                }}\n              >\n                <Text\n                  bgClip=\"text\"\n                  bgGradient=\"linear(to-l, #7928CA, #FF0080)\"\n                  fontWeight=\"extrabold\"\n                >\n                  {link.text}\n                </Text>\n              </Button>\n            </Link>\n          ))}\n          <Link href={SNS.THIS_GITHUB} _hover={{ textDecoration: \"none\" }}>\n            <Button\n              bg={useColorModeValue(\"gray.50\", \"gray.900\")}\n              color=\"gray.500\"\n              _hover={{ bg: useColorModeValue(\"gray.100\", \"gray.800\") }}\n            >\n              GitHub\n            </Button>\n          </Link>\n          <HStack p={2} spacing={1.5}>\n            <Text>🌙</Text>\n            <Switch\n              isChecked={colorMode === \"light\"}\n              onChange={toggleColorMode}\n              colorScheme=\"pink\"\n            />\n            <Text>☀️</Text>\n          </HStack>\n          <Menu>\n            <MenuButton as={Button} variant={\"link\"} cursor={\"pointer\"}>\n              <Avatar size=\"sm\" src={SNS.MY_AVATOR} />\n            </MenuButton>\n            <MenuList>\n              <MenuItem\n                as={Link}\n                isExternal\n                href={SNS.MY_GITHUB}\n                _hover={{ textDecor: \"none\" }}\n              >\n                GitHub\n              </MenuItem>\n              <MenuItem\n                as={Link}\n                isExternal\n                href={SNS.MY_LINKEDIN}\n                _hover={{ textDecor: \"none\" }}\n              >\n                Linkedin\n              </MenuItem>\n            </MenuList>\n          </Menu>\n        </HStack>\n      </Flex>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport { Box, Flex, Text, useColorModeValue } from \"@chakra-ui/react\";\nimport { Logo } from \"./Logo\";\n\nexport function Footer() {\n  return (\n    <Box\n      py={30}\n      bgGradient={useColorModeValue(\n        \"linear(to-b, gray.50, pink.100)\",\n        \"linear(to-b, gray.900, pink.900)\"\n      )}\n      flexGrow={1}\n    >\n      <Flex justifyContent=\"center\">\n        <Logo />\n      </Flex>\n      <Text pt={6} fontSize={\"sm\"} textAlign={\"center\"} color=\"pink.700\">\n        © 2021 Shun Namiki\n        <br />\n        This page is created by React / TypeScript / ChakraUI.\n      </Text>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport { Image } from \"@chakra-ui/react\";\n\nconst getIconUrl = (icon: string) =>\n  `http://openweathermap.org/img/wn/${icon}@2x.png`;\n\ntype Props = {\n  icon: string;\n  [key: string]: any;\n};\n\nexport function Icon({ icon, ...rest }: Props) {\n  return <Image src={getIconUrl(icon)} {...rest} />;\n}\n","import React from \"react\";\nimport { Icon } from \"./Icon\";\nimport { ForecastWeather, CurrentWeather } from \"../../types\";\nimport { Center, Box, Text, useColorModeValue } from \"@chakra-ui/react\";\n\nconst createDateFromUnixTime = (dt: number) => new Date(dt * 1_000); // REF: https://stackoverflow.com/questions/847185/convert-a-unix-timestamp-to-time-in-javascript\n\ntype Props = { item: ForecastWeather[\"list\"][0] | CurrentWeather };\n\nexport function WeatherItemCard({ item }: Props) {\n  const _date = createDateFromUnixTime(item.dt);\n  const day = _date.toDateString();\n  const time = `${String(_date.getHours()).padStart(2, \"0\")}:${String(\n    _date.getMinutes()\n  ).padStart(2, \"0\")}`;\n\n  return (\n    <Center>\n      <Box\n        boxShadow=\"2xl\"\n        align=\"center\"\n        rounded={\"lg\"}\n        p={12}\n        borderWidth={1}\n        borderColor={useColorModeValue(\"gray.50\", \"gray.700\")}\n      >\n        <Box>\n          <Icon icon={item.weather[0]?.icon} width={55} />\n        </Box>\n        <Box align=\"center\">\n          <Text w={130}>{day}</Text>\n          <Text>{time}</Text>\n        </Box>\n      </Box>\n    </Center>\n  );\n}\n","import { CurrentWeather, ForecastWeather } from \"../types\";\n\n// APIs\nconst API_KEY = \"b2b86779f50b9bf6a8c0808905029f25\";\nconst PREFIX_URL = \"https://api.openweathermap.org/data/2.5\";\nconst SUFFIX_URL = `&appid=${API_KEY}`;\n\n// urls\nconst getCurrentWeatherUrl = (cityName: string) =>\n  PREFIX_URL + `/weather?q=${cityName}` + SUFFIX_URL;\nconst getForecastWeatherUrl = (cityName: string, days: number) =>\n  PREFIX_URL + `/forecast?q=${cityName}&cnt=${days}` + SUFFIX_URL;\n\n// fetchers\nexport const searchCurrentWeather = async (cityName: string) => {\n  const url = getCurrentWeatherUrl(cityName);\n  try {\n    const res = await fetch(url);\n    if (res.status === 404) {\n      alert(\"maybe, city not found\"); // TODO: Don't alert here\n      return;\n    }\n    if (res.status !== 200) {\n      console.error(res?.body);\n      throw new Error(\"Unexpected status\");\n    }\n\n    const weatherObj: CurrentWeather = await res.json(); // TODO: improve type\n    return weatherObj;\n  } catch (err) {\n    console.error(\"SOMETHING ERROR HAPPEN: \", err);\n  }\n};\n\nexport const fetchForecastWeather = async (cityName: string, days: number) => {\n  const url = getForecastWeatherUrl(cityName, days);\n  try {\n    const res = await fetch(url);\n    if (res.status === 404) {\n      alert(\"maybe, city not found\"); // TODO: Don't alert here\n      return;\n    }\n    if (res.status !== 200) {\n      console.error(res?.body);\n      throw new Error(\"Unexpected status\");\n    }\n\n    const weatherObj: ForecastWeather = await res.json(); // TODO: improve type\n    return weatherObj;\n  } catch (err) {\n    console.error(\"SOMETHING ERROR HAPPEN: \", err);\n  }\n};\n","import React from \"react\";\nimport { CurrentWeather } from \"../types\";\nimport { searchCurrentWeather } from \"../api/weather\";\n\nconst DEFAULT_CITY_NAME = \"vancouver\";\n\nexport const useCurrentWeather = () => {\n  const [weather, setWeather] = React.useState<CurrentWeather | undefined>();\n\n  const searchWeather = React.useCallback((cityName = DEFAULT_CITY_NAME) => {\n    return searchCurrentWeather(cityName).then((weatherObj) => {\n      console.log(\"[after search]\");\n      if (!weatherObj) return;\n      setWeather(weatherObj);\n    });\n  }, []);\n\n  return { weather, searchWeather };\n};\n","import React from \"react\";\n\nexport const useInput = (defaultValue = \"\") => {\n  // TODO: not using useState but to handle using useRef because of reducing re-rendering\n  const [inputed, setInputed] = React.useState<string>(defaultValue);\n  const handleChange = React.useCallback((event) => {\n    setInputed(event.target.value);\n  }, []);\n  return [inputed, handleChange] as const;\n};\n","import React from \"react\";\nimport { WeatherItemCard } from \"../shared/WeatherItemCard\";\nimport { useCurrentWeather } from \"../../hooks/useCurrentWeather\";\nimport { useToggle } from \"../../hooks/useToggle\";\nimport { useInput } from \"../../hooks/useInput\";\nimport {\n  Box,\n  Button,\n  Input,\n  Checkbox,\n  HStack,\n  Text,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\n\n// TODO: modifable input\nconst RETRY_DURATION_MILLISECOND = 1_000 * 2 * 60;\n\nexport function WeatherPage() {\n  const [inputed, handleChange] = useInput(\"Vancouver\");\n\n  const [\n    lastSearchedCityName,\n    setLastSearchedCityName,\n  ] = React.useState<string>(inputed);\n  const { weather, searchWeather } = useCurrentWeather();\n\n  const handleClick = React.useCallback(() => {\n    console.log(\"[handleClick]\");\n    searchWeather(inputed).then(() => setLastSearchedCityName(inputed));\n  }, [inputed, searchWeather]);\n\n  const { on, toggle: handleToggle } = useToggle();\n\n  React.useEffect(() => {\n    console.log(\"[useEffect:initial-load-feature]\");\n    searchWeather();\n  }, [searchWeather]);\n\n  const searchCurrentWeather = React.useCallback(() => {\n    searchWeather(lastSearchedCityName);\n  }, [searchWeather, lastSearchedCityName]);\n\n  React.useEffect(() => {\n    console.log(\"[useEffect:interval-feature]\");\n    if (!on) return;\n    const handleInterval = setInterval(\n      searchCurrentWeather,\n      RETRY_DURATION_MILLISECOND\n    );\n    return () => clearInterval(handleInterval);\n  }, [on, searchCurrentWeather]);\n\n  const bg = useColorModeValue(\"gray.50\", \"gray.900\");\n  if (!weather) return <div></div>;\n\n  return (\n    <Box bg={bg} p={2}>\n      <Text\n        align=\"center\"\n        bgClip=\"text\"\n        bgGradient=\"linear(to-b, #7928CA, #FF0080)\"\n        fontSize=\"3xl\"\n        fontWeight=\"extrabold\"\n      >\n        Current Weather\n      </Text>\n      <Box p={5}>\n        <HStack>\n          <Input onChange={handleChange} value={inputed} />\n          <Button\n            onClick={handleClick}\n            bg=\"pink.600\"\n            color=\"white\"\n            _hover={{\n              bg: \"pink.500\",\n            }}\n          >\n            Search\n          </Button>\n        </HStack>\n        <Checkbox onChange={handleToggle} isChecked={on} colorScheme={\"pink\"}>\n          Auto fetch\n        </Checkbox>\n      </Box>\n\n      <Box p={10} align=\"center\">\n        <Text\n          bgClip=\"text\"\n          bgGradient=\"linear(to-b, #7928CA, #FF0080)\"\n          fontSize=\"3xl\"\n          fontWeight=\"extrabold\"\n        >\n          {lastSearchedCityName}\n        </Text>\n        <WeatherItemCard item={weather} />\n      </Box>\n    </Box>\n  );\n}\n","import React from \"react\";\n\nexport const useToggle = (init = true) => {\n  const [on, setOn] = React.useState<boolean>(init);\n  const toggle = React.useCallback(() => {\n    setOn((prev) => !prev);\n  }, []);\n  return { on, toggle };\n};\n","import React from \"react\";\nimport { ForecastWeather } from \"../../types\";\nimport { HStack, Box, Text } from \"@chakra-ui/react\";\nimport { WeatherItemCard } from \"../shared/WeatherItemCard\";\n\nexport function ForecastSection({ forecast }: { forecast?: ForecastWeather }) {\n  if (!forecast) return null;\n  return (\n    <Box p={7}>\n      <Box align=\"center\">\n        <Text\n          bgClip=\"text\"\n          bgGradient=\"linear(to-b, #7928CA, #FF0080)\"\n          fontSize=\"3xl\"\n          fontWeight=\"extrabold\"\n        >\n          {forecast.city.name}\n        </Text>\n      </Box>\n      <Box align=\"center\">\n        <HStack\n          maxWidth=\"100vw\"\n          overflowX=\"scroll\"\n          spacing={10}\n          px={30}\n          py={70}\n        >\n          {forecast.list.map((item, idx) => (\n            <WeatherItemCard item={item} key={idx} />\n          ))}\n        </HStack>\n      </Box>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport { fetchForecastWeather } from \"../../api/weather\";\nimport { ForecastWeather } from \"../../types\";\nimport { ForecastSection } from \"../forecast/ForecastSection\";\nimport { useInput } from \"../../hooks/useInput\";\n\nimport {\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n  Button,\n  Input,\n  Stack,\n  HStack,\n  Text,\n  Spinner,\n  Box,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\n\nconst DEFAULT_NUMBER_OS_DAYS = 7;\nconst DEFAULT_CITY_NAME = \"Tokyo\";\nconst MAX_DAYS = 16;\nconst inRange = (num: number) => num >= 0 && num <= MAX_DAYS;\n\nconst useInputDays = () => {\n  // TODO: not using useState, but useRef\n  const [days, setDays] = React.useState<number>(DEFAULT_NUMBER_OS_DAYS);\n  const handleChangeDays = React.useCallback((valueStr) => {\n    const _days = parseInt(valueStr || 0);\n    if (isNaN(_days)) return;\n    if (!inRange(_days)) return;\n    setDays(_days);\n  }, []);\n  return [days, handleChangeDays] as const;\n};\n\nexport function ForecastPage() {\n  const [cityName, handleChangeCityName] = useInput(DEFAULT_CITY_NAME);\n  const [days, handleChangeDays] = useInputDays();\n\n  const [forecast, setForecst] = React.useState<ForecastWeather | undefined>(\n    undefined\n  );\n  const [loading, setLoading] = React.useState<boolean>(false);\n\n  const handleClick = React.useCallback(() => {\n    if (loading) return;\n    setLoading(true);\n    const _days = inRange(days) ? days : DEFAULT_NUMBER_OS_DAYS;\n    console.log(\"cityname\", cityName, \"days\", _days);\n    fetchForecastWeather(cityName, _days)\n      .then((data) => {\n        if (!data) return;\n        setForecst(data);\n      })\n      .catch((err) => console.log(\"oh, err\", err))\n      .finally(() => setLoading(false));\n  }, [days, cityName, loading]);\n\n  return (\n    <Stack bg={useColorModeValue(\"gray.50\", \"gray.900\")} p={2}>\n      <Text\n        align=\"center\"\n        bgClip=\"text\"\n        bgGradient=\"linear(to-b, #7928CA, #FF0080)\"\n        fontSize=\"3xl\"\n        fontWeight=\"extrabold\"\n      >\n        Forecast\n      </Text>\n      <Stack p={10} m={2} borderRadius={10} borderWidth={1}>\n        <HStack align=\"center\" justifyContent=\"space-between\">\n          <Text as=\"label\" color=\"pink.800\">\n            City Name\n          </Text>\n          <Input\n            value={cityName}\n            onChange={handleChangeCityName}\n            placeholder=\"e.g. Tokyo\"\n            width=\"80%\"\n            color=\"pink.800\"\n          />\n        </HStack>\n\n        <HStack align=\"center\" justifyContent=\"space-between\">\n          <Text as=\"label\" color=\"pink.800\">\n            Items\n          </Text>\n          <NumberInput\n            value={days}\n            onChange={handleChangeDays}\n            placeholder=\"e.g. 0~16\"\n            width=\"80%\"\n            color=\"pink.800\"\n          >\n            <NumberInputField />\n            <NumberInputStepper>\n              <NumberIncrementStepper />\n              <NumberDecrementStepper />\n            </NumberInputStepper>\n          </NumberInput>\n        </HStack>\n\n        <Button\n          onClick={handleClick}\n          disabled={loading}\n          bg=\"pink.600\"\n          color=\"white\"\n          _hover={{\n            bg: \"pink.500\",\n          }}\n        >\n          Get Forecast\n        </Button>\n      </Stack>\n\n      {loading ? (\n        <Box align=\"center\">\n          <Spinner color=\"pink\" />\n        </Box>\n      ) : (\n        <ForecastSection forecast={forecast} />\n      )}\n    </Stack>\n  );\n}\n","import React from \"react\";\nimport { Link as ReactRouterLink } from \"react-router-dom\";\nimport {\n  Text,\n  Box,\n  Button,\n  HStack,\n  Link,\n  useColorModeValue,\n} from \"@chakra-ui/react\";\nimport { PATH } from \"../../constants\";\n\nconst pages = [\n  {\n    title: \"Weather\",\n    description:\n      \"Access current weather data for any location including over 200,000 cities.\",\n    path: PATH.current,\n  },\n  {\n    title: \"Forecast\",\n    description:\n      \"5 day forecast including weather data every 3 hours is available at any location or city.\",\n    path: PATH.forecast,\n  },\n] as const;\n\nexport function HomePage() {\n  const boxBorderColor = useColorModeValue(\"gray.300\", \"gray.600\");\n  return (\n    <Box bg={useColorModeValue(\"gray.50\", \"gray.900\")} px={10}>\n      <Box py={10}>\n        <Text\n          bgClip=\"text\"\n          bgGradient=\"linear(to-b, #7928CA, #FF0080)\"\n          fontSize={100}\n          lineHeight=\"90px\"\n          fontWeight=\"extrabold\"\n        >\n          Open\n          <br />\n          Weather\n          <br />\n          App\n          <br />\n        </Text>\n      </Box>\n      <HStack align=\"center\" py={10}>\n        {pages.map((page, idx) => (\n          <Box\n            key={idx}\n            p={10}\n            borderColor={boxBorderColor}\n            borderWidth={1}\n            borderRadius=\"10px\"\n          >\n            <Text\n              bgClip=\"text\"\n              bgGradient=\"linear(to-b, #7928CA, #FF0080)\"\n              fontSize={50}\n              fontWeight=\"extrabold\"\n            >\n              {page.title}\n            </Text>\n            <Text color=\"pink.600\">{page.description}</Text>\n            <Link\n              to={page.path}\n              as={ReactRouterLink}\n              _hover={{ textDecoration: \"none\" }}\n            >\n              <Button\n                mt={4}\n                bg=\"pink.500\"\n                _hover={{ bg: \"pink.300\" }}\n                color={\"white\"}\n              >\n                Goto Page!\n              </Button>\n            </Link>\n          </Box>\n        ))}\n      </HStack>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport { MemoryRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { PATH } from \"./constants\";\nimport { Navigation } from \"./components/shared/Navigation\";\nimport { Footer } from \"./components/shared/Footer\";\nimport { WeatherPage } from \"./components/pages/WeatherPage\";\nimport { ForecastPage } from \"./components/pages/ForecastPage\";\nimport { HomePage } from \"./components/pages/HomePage\";\nimport { ChakraProvider, Flex } from \"@chakra-ui/react\";\n\nfunction Body() {\n  return (\n    <Switch>\n      <Route path={PATH.current}>\n        <WeatherPage />\n      </Route>\n      <Route path={PATH.forecast}>\n        <ForecastPage />\n      </Route>\n      <Route path={PATH.home}>\n        <HomePage />\n      </Route>\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <ChakraProvider>\n      <Router>\n        <Flex minHeight=\"100vh\" flexDir=\"column\">\n          <Navigation />\n          <Body />\n          <Footer />\n        </Flex>\n      </Router>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}